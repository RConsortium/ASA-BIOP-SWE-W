---
title: "TaskView Hexwall"
format: 
  dashboard:
    orientation: columns
---

## Column {width=30%}

```{r, echo = FALSE}
# Download Views binary file from CRAN
tmpfile <- tempfile()
repo <- 'https://cloud.r-project.org'
download.file(paste(repo, "src/contrib/Views.rds", sep = "/"), destfile = tmpfile)

# Get packages on the task view
all_Views      <- readRDS(tmpfile)
unlink(tmpfile)
ctv_clintrials <- all_Views$ClinicalTrials
ctv_clintrials_packages <- ctv_clintrials$packagelist$name

# Construct URI to get contents of the man/figures subdirectory on CRAN GitHub
make_cran_uri <- function(dep, endpoint = 'api.github.com'){
  sprintf('https://%s/repos/cran/%s/contents/man/figures', endpoint, dep)
}

# look for png files in the repos
# need a GITHUB_PAT for multiple hits to the API
get_logo <- function(dep){
  res_cran <- httr::GET(
    url = make_cran_uri(dep),
    httr::add_headers(
      Authorization = sprintf('token %s',Sys.getenv('GITHUB_PAT'))
    )
  )
  
  if(httr::status_code(res_cran)=='200'){
    man_cran <- httr::content(res_cran)
    ret <- purrr::map_chr(man_cran, ~.x$download_url)
    ret[!grepl('^(README|lifecycle)',basename(ret))]
  }
  else{
    NA_character_
  }
}

# Invoke the functions
ctv_clintrials_logos <- ctv_clintrials_packages |> 
  purrr::set_names() |>
  purrr::map(get_logo)

# Postprocessing
ctv_clintrials_logos_clean <- ctv_clintrials_logos |> 
  tibble::enframe(name = 'package', value = 'url') |>
  tidyr::unnest(c(url)) |>
  dplyr::filter(grepl('(adaptr|logo).png$',url))

missing_logo <- setdiff(names(ctv_clintrials_logos), ctv_clintrials_logos_clean$package)
missing_logo_colors <- sample(viridis::inferno(length(missing_logo)*2), length(missing_logo))
```

```{r, echo = FALSE}
library(minisvg)
len     <- 95
angles  <- (seq(0, 360, 60) + 90) * pi/180
xs      <- round(len * cos(angles) + 100, 2)
ys      <- round(len * sin(angles) + 100, 2)
hex     <- stag$polygon(id = 'hex', xs = xs, ys = ys)
hex$update(stroke = '#223344', fill_opacity=0.25, stroke_width = 4)

def_layer <- svg_doc(style = "display:none", width = 200, height = 200)$update(width=90, height=90)
def_layer$add_css_url("https://fonts.googleapis.com/css?family=Abril%20Fatface")
def_layer$add_css("
.mainfont {
  font-size: 17px;
  font-family: 'Abril Fatface', sans-serif;
  fill: #223344;
}
")
def_layer$defs(hex)
```


```{r, echo = FALSE}
mysvg <- function(nm, color){
new_doc <- svg_doc(width = 200, height = 200)$update(width=90, height=90)
g <- stag$g()
g$update(onclick=sprintf("hover('%s')",file.path("https://cran.r-project.org/web/packages",nm)))
g$use(href = "#hex", fill = color)

text <- stag$text(
  nm,
  class = "mainfont",
  x = 100, y = 100,
  `text-anchor`="middle",
  `alignment-baseline`="middle"
)

g$append(text)

new_doc$append(g)
new_doc$as_character()
}

```

```{r, echo = FALSE}
htmltools::tags$iframe(
  id="descIframe", width="100%", height="95%",
  src = file.path("https://cran.r-project.org/web/packages",ctv_clintrials_logos_clean$package[1])
)
```

## Column {width=60%}

```{r, results="asis", echo = FALSE}
def_layer$as_character()
# Construct the wall
htmltools::tags$div(
    #style = "background-color: #feeacd; border-style: solid; border-radius: 10px; border-color: #000; border-width: 1px;",
    htmltools::tagList(
    purrr::map2(
      ctv_clintrials_logos_clean$package, 
      ctv_clintrials_logos_clean$url, 
      ~htmltools::tags$img(
                onclick=sprintf("hover('%s')",file.path("https://cran.r-project.org/web/packages",.x)),
                src = .y, 
                width = "90", 
                style="padding-left: 5px; padding-right: 5px;padding-top: 2px; padding-bottom: 2px;")
      ),
    purrr::map2(missing_logo, missing_logo_colors, ~mysvg(.x, .y)))
  )
```

```{=html}
<script>
function hover(uri) {
    document.getElementById('descIframe').src = uri;
}
</script>
```
