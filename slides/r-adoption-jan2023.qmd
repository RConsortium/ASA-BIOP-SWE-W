---
title: "MMRM and ASA SWE - R Adoption Series"
author: "Ben Arancibia and Yoni Sidi"
format: 
  revealjs:
    theme: dark
    incremental: true
    logo: https://github.com/RConsortium/asa-biop-swe-wg/raw/main/sticker/sticker-1200.png
    slide-number: c/t
title-slide-attributes: 
  data-background-image: https://github.com/RConsortium/asa-biop-swe-wg/raw/main/sticker/sticker-1200.png
  data-background-size: 20%
  data-background-opacity: "0.5"
  data-background-position: 80% 10%
editor: visual
---

## Agenda

-   Introduction and Overview of AWA SWE

-   Mix Models for Repeated Measures - Why is it a Problem?

-   MMRM Package

    -   ASA SWE Development Practices

    -   Why this is not "yet another package"

    -   Long Term Perspective

    -   Comparing MMRM R Package to SAS - Demo

-   Closing and Next Steps

## Software Engineering in Biostatistics

-   the importance of reliable software for statistical analysis cannot be underestimated in the pharmaceutical industry
-   in the past a lot of of regulatory grade statistical analysis has been done with proprietary software, but was supported by internally written software
-   open source software has been increasing in usage within Biostatistics and the use of R and R packages is becoming more prevalent
-   a couple of issues is that current repositories (GitHub, CRAN) do not require any statistical quality assurance for R packages and it's harder to adopt packages in organizations without good documentation and maintenance

## How to deal with these issues?

-   To deal with the issues of statistical quality assurances for R packages and creating high quality statistical software a group came together to create through the ASA called the "Software Engineering Working Group" SWE WG to look R packages from a statistical point of view

## SWE WG - Goals

-   SWE WG goals are to:

    -   engineer R Packages to fill critical gaps
    -   develop and share best practices for engineering robust and reliable software for Biostatistics
        -   version control, code review, unit testing, integration tests, continuous deployment, reproducibility, package design, and object oriented programming
        
## WHY MMRM?
- 
